
//

#include "pch.h"
#include "framework.h"
#include "MalwareDetector.h"
#include "MalwareDetectorDlg.h"
#include "afxdialogex.h"
#include "ScanFile.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


CStringW ATW(const CStringA& strData, CStringW& strRet)
{
	INT n = 0;
	if (!strData.IsEmpty())
	{
		n = MultiByteToWideChar(CP_ACP, 0, strData, -1, NULL, 0);
		MultiByteToWideChar(CP_ACP, 0, strData, -1, strRet.GetBufferSetLength(n), n);
		strRet.ReleaseBuffer();
	}
	return strRet;
}

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();


#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV


protected:
	DECLARE_MESSAGE_MAP()
public:
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()






CMalwareDetectorDlg::CMalwareDetectorDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_MALWAREDETECTOR_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMalwareDetectorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, TREE_DIR, m_DirTree);
	DDX_Control(pDX, BTN_STARTSCAN, m_btnStartScan);
	DDX_Control(pDX, PROGRESS_SCAN, m_ProgressCtl);
	DDX_Text(pDX, EDIT_LOG, m_strShowFindEdit);
}

BEGIN_MESSAGE_MAP(CMalwareDetectorDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CMalwareDetectorDlg::OnBnClickedOk)
	ON_NOTIFY(TVN_ITEMEXPANDING, TREE_DIR, &CMalwareDetectorDlg::OnTvnItemexpandingDir)
	ON_NOTIFY(NM_CLICK, TREE_DIR, &CMalwareDetectorDlg::OnNMClickDir)
	ON_NOTIFY(NM_TVSTATEIMAGECHANGING, TREE_DIR, &CMalwareDetectorDlg::OnNMTVStateImageChangingDir)
	ON_BN_CLICKED(BTN_STARTSCAN, &CMalwareDetectorDlg::OnBnClickedStartscan)
	ON_BN_CLICKED(IDCANCEL, &CMalwareDetectorDlg::OnBnClickedCancel)
END_MESSAGE_MAP()



BOOL CMalwareDetectorDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}


	SetIcon(m_hIcon, TRUE);			
	SetIcon(m_hIcon, FALSE);		



	InitializeCriticalSection(&m_cs);

	InitTreeCtrl();

	m_ProgressCtl.SetRange(0, 100);
	m_ProgressCtl.SetPos(0);

	GetAllSequence();

	return TRUE;  // 
}

void CMalwareDetectorDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}



void CMalwareDetectorDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); 

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}


HCURSOR CMalwareDetectorDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CMalwareDetectorDlg::SetProgressCtrl(int n)
{
	if (n > 100)
	{
		n = 100;
	}
	m_ProgressCtl.SetPos(n);
	if (100 == n)
	{
		GetDlgItem(STATIC_FILEPATH)->SetWindowText(_T("Scan Finish."));

		m_ullScannedCnt = 0;
		m_ullTotoal = 0;
		m_btnStartScan.EnableWindow(TRUE);
	}
	return;
}

void CMalwareDetectorDlg::OnBnClickedOk()
{

	// Release Source and exit
	DeleteCriticalSection(&m_cs);

	CDialogEx::OnOK();
}

void AppendSplitChar(CString& strSrc)
{
	if (!strSrc.IsEmpty() && strSrc[strSrc.GetLength()-1] != _T('\\') && strSrc[strSrc.GetLength()-1] != _T('/'))
	{
		strSrc += _T("\\");
	}
	return;
}

void CMalwareDetectorDlg::GetAllDrivers(std::vector<CString>& DriverVec)
{
	TCHAR tzAllDrivers[MAXBYTE]{ 0 };
	::GetLogicalDriveStrings(_countof(tzAllDrivers), tzAllDrivers);
	TCHAR* lpDrive = tzAllDrivers;
	while (lpDrive[0])
	{
		DriverVec.emplace_back(lpDrive);
		lpDrive += _tcslen(lpDrive) + 1;
	}

	return;
}

void CMalwareDetectorDlg::InitTreeCtrl()
{
	// GetAll Drivers
	std::vector<CString> DriverVec;
	GetAllDrivers(DriverVec);
	HTREEITEM hRoot = m_DirTree.InsertItem(_T("Computer"));
	for (auto& Driver:DriverVec)
	{
		HTREEITEM hNew = m_DirTree.InsertItem(Driver, hRoot);
	}

	return;
}

void CMalwareDetectorDlg::GetParentNodeText(HTREEITEM hChild, CString& strFullPath)
{
	do 
	{
		HTREEITEM hParent = m_DirTree.GetParentItem(hChild);
		if (hParent && hParent != m_DirTree.GetRootItem())
		{
			CString strText = m_DirTree.GetItemText(hParent);
			AppendSplitChar(strText);
			strFullPath = strText + strFullPath;
			GetParentNodeText(hParent, strFullPath);
		}
	} while (false);

	return;
}

void GetAllSubDir(CString strDir, std::vector<CString>& AllSubDirVec)
{
	WIN32_FIND_DATA wfd;
	HANDLE hFind = INVALID_HANDLE_VALUE;
	AppendSplitChar(strDir);
	CString strDirSpec = strDir + _T("*.*");
	hFind = FindFirstFile(strDirSpec, &wfd);
	if (INVALID_HANDLE_VALUE != hFind)
	{
		do
		{
			if (_tcscmp(_T("."), wfd.cFileName) && _tcscmp(_T(".."), wfd.cFileName))
			{
				CString strTempFile = strDir + wfd.cFileName;
				DWORD dwAttr = ::GetFileAttributes(strTempFile);
				if (dwAttr & FILE_ATTRIBUTE_DIRECTORY)
				{
					AllSubDirVec.emplace_back(wfd.cFileName);
				}
			}
		} while (::FindNextFile(hFind, &wfd));
		::FindClose(hFind);
	}

	return;
}

void CMalwareDetectorDlg::InsertTreeItemChildren(HTREEITEM hParent, CString strCurNodeText)
{
	do 
	{
		std::vector<CString> AllSubDirVec;
		CString strFullPath;
		if (hParent == m_DirTree.GetRootItem())
		{
			GetAllDrivers(AllSubDirVec);
		}
		else
		{
			GetParentNodeText(hParent, strFullPath);
			strFullPath = strFullPath + strCurNodeText;
			GetAllSubDir(strFullPath, AllSubDirVec);
		}

		for (auto& dir : AllSubDirVec)
		{
			HTREEITEM hNew = m_DirTree.InsertItem(dir, hParent);

			// if the parent node is checked, its child node is checked too.
			BOOL bCheck = m_DirTree.GetCheck(hParent);
			m_DirTree.SetCheck(hNew, bCheck);		
		}

	} while (false);

	return;
}

void CMalwareDetectorDlg::OnTvnItemexpandingDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	LPNMTREEVIEW pNMTreeView = reinterpret_cast<LPNMTREEVIEW>(pNMHDR);
	do 
	{
		HTREEITEM hSel = m_DirTree.GetSelectedItem();
		if (!hSel && !m_DirTree.ItemHasChildren(hSel))
		{
			break;
		}

		CString strSelText = m_DirTree.GetItemText(hSel);
		HTREEITEM hNext = NULL;
		HTREEITEM hChild = m_DirTree.GetChildItem(hSel);
		while (hChild)
		{
			CString strText = m_DirTree.GetItemText(hChild);
			hNext = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
			m_DirTree.DeleteItem(hChild);
			hChild = hNext;
		}
		InsertTreeItemChildren(hSel, strSelText); 
		hChild = m_DirTree.GetChildItem(hSel);
		while (hChild)
		{
			CString strText = m_DirTree.GetItemText(hChild);
			InsertTreeItemChildren(hChild, strText);
			hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
		}

	} while (false);
	*pResult = 0;
}

void CMalwareDetectorDlg::OnNMClickDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	CPoint pt;
	GetCursorPos(&pt);
	m_DirTree.ScreenToClient(&pt);
	UINT nFlag = 0;
 	HTREEITEM hItem = m_DirTree.HitTest(pt,&nFlag);
	if (hItem)
	{
		m_DirTree.SelectItem(hItem);
	}

	*pResult = 0;
}

void CMalwareDetectorDlg::GetAllCheckedItem(HTREEITEM hNode)
{
	CString strText = m_DirTree.GetItemText(hNode);
	BOOL bChecked = m_DirTree.GetCheck(hNode);
	CString strFullPath;
	if (bChecked)
	{
		CString strCurNodeText = m_DirTree.GetItemText(hNode);
		GetParentNodeText(hNode, strFullPath);
		strFullPath = strFullPath + strCurNodeText;
		m_AllCheckedItemSet.insert(strFullPath);
	}
	else
	{
		if (m_DirTree.ItemHasChildren(hNode))
		{
			HTREEITEM hNextItem = nullptr;
			HTREEITEM hChild = m_DirTree.GetChildItem(hNode);
			while (hChild)
			{
				CString strText1 = m_DirTree.GetItemText(hChild);
				GetAllCheckedItem(hChild);
				hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
			}
		}
	}
	return;
}

void CMalwareDetectorDlg::CheckToTree(HTREEITEM hItem, BOOL bCheck)
{
	if (hItem != NULL) 
	{
		SetChildCheck(hItem, bCheck);
		SetParentCheck(hItem, bCheck);
	}
}

void CMalwareDetectorDlg::SetChildCheck(HTREEITEM hItem, BOOL bCheck)
{
	HTREEITEM hChildItem = m_DirTree.GetChildItem(hItem);
	while (hChildItem) 
	{
		m_DirTree.SetCheck(hChildItem, bCheck);
		SetChildCheck(hChildItem, bCheck);
		hChildItem = m_DirTree.GetNextSiblingItem(hChildItem);
	}
}

void CMalwareDetectorDlg::SetParentCheck(HTREEITEM hItem, BOOL bCheck)
{
	HTREEITEM hParent = m_DirTree.GetParentItem(hItem);
	if (hParent == NULL)
	{
		return;
	}
	if (bCheck)
	{
		HTREEITEM hSlibing = m_DirTree.GetNextSiblingItem(hItem); 
		BOOL bFlag = TRUE;
		while (hSlibing)
		{
			if (!m_DirTree.GetCheck(hSlibing)) 
			{
				bFlag = FALSE; 
				break;
			}
			hSlibing = m_DirTree.GetNextSiblingItem(hSlibing); 
		}

		if (bFlag) 
		{
			hSlibing = m_DirTree.GetPrevSiblingItem(hItem); 
			while (hSlibing) 
			{
				if (!m_DirTree.GetCheck(hSlibing))
				{
					bFlag = FALSE; 
					break;
				}
				hSlibing = m_DirTree.GetPrevSiblingItem(hSlibing); 
			}
		}

		if (bFlag)
		{
			m_DirTree.SetCheck(hParent, TRUE);
		}
	}
	else 
	{
		m_DirTree.SetCheck(hParent, FALSE);
	}

	SetParentCheck(hParent, m_DirTree.GetCheck(hParent));
}

void CMalwareDetectorDlg::GetAllSequence()
{
	bool bOK = false;
	do 
	{
		CString strFileName(_T("sequence.txt"));
		std::ifstream iFile(strFileName);
		DWORD dwLastErr = ::GetLastError();
		if (!iFile.is_open())
		{
			CString strMsg;
			TCHAR pathBuf[MAX_PATH] = { 0 };
			DWORD dwRet = GetFullPathName(strFileName, MAX_PATH, pathBuf, nullptr);

			strMsg.Format(_T("OpenFile Failed:[%s], error code:[%d]."), pathBuf, dwLastErr);
			AfxMessageBox(strMsg);
			break;
		}
		std::string strLine;
		while (std::getline(iFile, strLine))
		{
			auto pos = strLine.find(".");
			if (std::string::npos != pos)
			{
				std::string strSeq = strLine.substr(0, pos);
				std::string strGUID = strLine.substr(pos + 1);
				m_SequenceMap[strSeq] = strGUID;
				int nSeqLen = strSeq.size();
				m_nSequeMaxLen = m_nSequeMaxLen > nSeqLen ? m_nSequeMaxLen : nSeqLen;
			}
		}
		iFile.close();
		bOK = true;
	} while (false);
	if (!bOK)
	{
		EndDialog(0);
	}

	return;
}

void CMalwareDetectorDlg::OnNMTVStateImageChangingDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	CPoint pt;
	GetCursorPos(&pt);
	ScreenToClient(&pt);
	MapWindowPoints((CWnd*)&m_DirTree, &pt, 1);

	UINT flag = TVHT_ONITEM;
	HTREEITEM hCurrentItem = m_DirTree.HitTest(pt, &flag);
	if (hCurrentItem)
	{
		m_DirTree.SelectItem(hCurrentItem);
		if (flag & (TVHT_ONITEMSTATEICON)) 
		{
			CheckToTree(hCurrentItem, !m_DirTree.GetCheck(hCurrentItem));
		}
	}

	*pResult = 0;
}

void CMalwareDetectorDlg::AddTargetFiles(std::vector<CString>& FilesVec)
{
	CLock lk(m_cs);
	m_TargetFiles.assign(FilesVec.begin(), FilesVec.end());
	return;
}

void CMalwareDetectorDlg::OnBnClickedStartscan()
{

	HTREEITEM hRoot = m_DirTree.GetRootItem();

	if (m_DirTree.GetCheck(hRoot) && m_DirTree.ItemHasChildren(hRoot))
	{
		HTREEITEM hNextItem = nullptr;
		HTREEITEM hChild = m_DirTree.GetChildItem(hRoot);
		while (hChild)
		{
			m_AllCheckedItemSet.insert(m_DirTree.GetItemText(hChild));
			hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
		}
	}
	else
	{
		GetAllCheckedItem(hRoot);
	}

	m_btnStartScan.EnableWindow(FALSE);

	auto nSize = m_AllCheckedItemSet.size();
	int i = 0;
	std::set<CString> tmp;
	for (auto strDir : m_AllCheckedItemSet)
	{
		tmp.insert(strDir);
		if (0 == (++i % 5))
		{
			// every worker handle five dirs
			CGetAllFiles* pWork = new CGetAllFiles(this, tmp);
			m_ThreadPool.InsertWorkItem(pWork);
			tmp.clear();
		}
		else if (nSize == i)
		{
			// the rest use the last worker
			CGetAllFiles* pWork = new CGetAllFiles(this, tmp);
			m_ThreadPool.InsertWorkItem(pWork);
		}
	}
	i = 0;
	while (!m_ThreadPool.IsAllWorkFinished() && i < 180) // wait 3 minutes
	{
		Sleep(500);
		i++;
	}

	// GetAllFilesOK, start scan files
	m_ullTotoal = m_TargetFiles.size();
	i = 0;
	std::vector<CString> tmpfiles;
	for (auto& targetfile : m_TargetFiles)
	{
		tmpfiles.emplace_back(targetfile);
		if (0 == (++i % 50))
		{
			// every worker handle fifty files
			CScanFile* pWork = new CScanFile(this, tmpfiles);
			m_ThreadPool.InsertWorkItem(pWork);
			tmpfiles.clear();
		}
		else if (m_ullTotoal == i)
		{
			// the rest use the last worker
			CScanFile* pWork = new CScanFile(this, tmpfiles);
			m_ThreadPool.InsertWorkItem(pWork);
		}
	}

	return;
}

void CMalwareDetectorDlg::OnBnClickedCancel()
{
	// Release Source and exit
	DeleteCriticalSection(&m_cs);



	CDialogEx::OnCancel();
}

CString getCurrentTime(void) 
{
	CTime timeNow;
	CString strTime;

	timeNow = CTime::GetCurrentTime();
	strTime = timeNow.Format("%Y/%m/%d %H:%M:%S");
	return std::move(strTime);
}

LRESULT CMalwareDetectorDlg::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_PROGRESS:
	{
		CProgressInfo* pProgress = reinterpret_cast<CProgressInfo*>(wParam);
		if (pProgress)
		{
			CString strDes;
			strDes.Format(_T("Scanning: %I64d/%I64d:  %s"), m_ullScannedCnt.load()+1, m_ullTotoal, pProgress->m_strFilePath);
			GetDlgItem(STATIC_FILEPATH)->SetWindowText(strDes);

			delete pProgress;
		}
		else
		{
			int nPercent = static_cast<int>((m_ullScannedCnt * 100) / m_ullTotoal);
			SetProgressCtrl(nPercent);
			UpdateData(FALSE);
			CString strLog;
			strLog.Format(_T("has scanned: %I64d/%I64d.\r\n"), m_ullScannedCnt.load(), m_ullTotoal);
			OutputDebugString(strLog);

		}
	}
	break;
	case WM_FINDFILE:
	{
		CFileGuid* pFind = reinterpret_cast<CFileGuid*>(wParam);
		if (pFind)
		{
			CString strNewLog;
			strNewLog.Format(_T("%s  %s, %s.\r\n"), getCurrentTime(), pFind->m_strFilePath.c_str(), ATW(pFind->m_strGuid.c_str(), CString()));


			UpdateData(TRUE);
			m_strShowFindEdit += strNewLog;
			UpdateData(FALSE);
			delete pFind;
		}

	}		
	default:
		break;
	}

	return CDialogEx::WindowProc(message, wParam, lParam);
}
