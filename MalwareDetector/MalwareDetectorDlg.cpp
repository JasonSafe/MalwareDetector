
// MalwareDetectorDlg.cpp: 实现文件
//

#include "pch.h"
#include "framework.h"
#include "MalwareDetector.h"
#include "MalwareDetectorDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
public:
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMalwareDetectorDlg 对话框



CMalwareDetectorDlg::CMalwareDetectorDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_MALWAREDETECTOR_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMalwareDetectorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, TREE_DIR, m_DirTree);
	DDX_Control(pDX, BTN_STARTSCAN, m_btnStartScan);
}

BEGIN_MESSAGE_MAP(CMalwareDetectorDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CMalwareDetectorDlg::OnBnClickedOk)
	ON_NOTIFY(TVN_ITEMEXPANDING, TREE_DIR, &CMalwareDetectorDlg::OnTvnItemexpandingDir)
	ON_NOTIFY(NM_CLICK, TREE_DIR, &CMalwareDetectorDlg::OnNMClickDir)
	ON_NOTIFY(NM_TVSTATEIMAGECHANGING, TREE_DIR, &CMalwareDetectorDlg::OnNMTVStateImageChangingDir)
	ON_BN_CLICKED(BTN_STARTSCAN, &CMalwareDetectorDlg::OnBnClickedStartscan)
END_MESSAGE_MAP()


// CMalwareDetectorDlg 消息处理程序

BOOL CMalwareDetectorDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	InitTreeCtrl();


	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMalwareDetectorDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMalwareDetectorDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMalwareDetectorDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CMalwareDetectorDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnOK();
}

void AppendSplitChar(CString& strSrc)
{
	if (strSrc[strSrc.GetLength()-1] != _T('\\') && strSrc[strSrc.GetLength()-1] != _T('/'))
	{
		strSrc += _T("\\");
	}
	return;
}

void CMalwareDetectorDlg::InitTreeCtrl()
{
	// GetAll Drivers
	std::vector<std::tstring> DriverVec;
	TCHAR tzAllDrivers[MAXBYTE]{ 0 };
	::GetLogicalDriveStrings(_countof(tzAllDrivers), tzAllDrivers);
	TCHAR* lpDrive = tzAllDrivers;
	while (lpDrive[0])
	{
		DriverVec.emplace_back(lpDrive);
		lpDrive += _tcslen(lpDrive) + 1;
	}

	HTREEITEM hRoot = m_DirTree.InsertItem(_T("Computer"));
	for (auto& Driver:DriverVec)
	{
		HTREEITEM hNew = m_DirTree.InsertItem(Driver.c_str(), hRoot);
	}

	return;
}

void CMalwareDetectorDlg::GetParentNodeText(HTREEITEM hChild, CString& strFullPath)
{
	do 
	{
		HTREEITEM hParent = m_DirTree.GetParentItem(hChild);
		if (hParent && hParent != m_DirTree.GetRootItem())
		{
			CString strText = m_DirTree.GetItemText(hParent);
			AppendSplitChar(strText);
			strFullPath = strText + strFullPath;
			GetParentNodeText(hParent, strFullPath);
		}
	} while (false);

	return;
}

void GetAllSubDir(CString strDir, std::vector<CString>& AllSubDirVec)
{
	WIN32_FIND_DATA wfd;
	HANDLE hFind = INVALID_HANDLE_VALUE;
	AppendSplitChar(strDir);
	CString strDirSpec = strDir + _T("*.*");
	hFind = FindFirstFile(strDirSpec, &wfd);
	if (INVALID_HANDLE_VALUE != hFind)
	{
		do
		{
			if (_tcscmp(_T("."), wfd.cFileName) && _tcscmp(_T(".."), wfd.cFileName))
			{
				CString strTempFile = strDir + wfd.cFileName;
				DWORD dwAttr = ::GetFileAttributes(strTempFile);
				if (dwAttr & FILE_ATTRIBUTE_DIRECTORY)
				{
					AllSubDirVec.emplace_back(wfd.cFileName);
				}
			}
		} while (::FindNextFile(hFind, &wfd));
		::FindClose(hFind);
	}

	return;
}

void CMalwareDetectorDlg::InsertTreeItemChildren(HTREEITEM hParent, CString strCurNodeText)
{
	do 
	{
		std::vector<CString> AllSubDirVec;
		CString strFullPath;
		GetParentNodeText(hParent,strFullPath);
		strFullPath = strFullPath + strCurNodeText;

		GetAllSubDir(strFullPath, AllSubDirVec);

		for (auto& dir : AllSubDirVec)
		{
			HTREEITEM hNew = m_DirTree.InsertItem(dir, hParent);

			// if the parent node is checked, its child node is checked too.
			BOOL bCheck = m_DirTree.GetCheck(hParent);
			m_DirTree.SetCheck(hNew, bCheck);		
		}

	} while (false);

	return;
}


void CMalwareDetectorDlg::OnTvnItemexpandingDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	LPNMTREEVIEW pNMTreeView = reinterpret_cast<LPNMTREEVIEW>(pNMHDR);
	// TODO: 在此添加控件通知处理程序代码
	do 
	{
		HTREEITEM hSel = m_DirTree.GetSelectedItem();
		if (!hSel && !m_DirTree.ItemHasChildren(hSel))
		{
			break;
		}
		HTREEITEM hChild = m_DirTree.GetChildItem(hSel);//m_DirTree.GetNextSiblingItem(hSel);
		while (hChild)
		{
			CString strText = m_DirTree.GetItemText(hChild);
			InsertTreeItemChildren(hChild, strText);
			hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);//m_DirTree.GetNextSiblingItem(hChild);
		}

	} while (false);
	*pResult = 0;
}


void CMalwareDetectorDlg::OnNMClickDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	// TODO: 在此添加控件通知处理程序代码
	CPoint pt;
	GetCursorPos(&pt);
	m_DirTree.ScreenToClient(&pt);
	UINT nFlag = 0;
 	HTREEITEM hItem = m_DirTree.HitTest(pt,&nFlag);
	if (hItem)
	{
		m_DirTree.SelectItem(hItem);
	}

	*pResult = 0;
}

void CMalwareDetectorDlg::GetAllCheckedItem(HTREEITEM hNode)
{
	CString strText = m_DirTree.GetItemText(hNode);
	BOOL bChecked = m_DirTree.GetCheck(hNode);
	CString strFullPath;
	if (bChecked)
	{
		CString strCurNodeText = m_DirTree.GetItemText(hNode);
		GetParentNodeText(hNode, strFullPath);
		strFullPath = strFullPath + strCurNodeText;
		m_AllCheckedItemVec.insert(strFullPath);
	}
	else
	{
		if (m_DirTree.ItemHasChildren(hNode))
		{
			HTREEITEM hNextItem = nullptr;
			HTREEITEM hChild = m_DirTree.GetChildItem(hNode);
			while (hChild)
			{
				CString strText1 = m_DirTree.GetItemText(hChild);
				GetAllCheckedItem(hChild);
				hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
			}
		}
	}
	return;
}



void CMalwareDetectorDlg::CheckToTree(HTREEITEM hItem, BOOL bCheck)
{
	if (hItem != NULL) 
	{
		SetChildCheck(hItem, bCheck);
		SetParentCheck(hItem, bCheck);
	}
}

void CMalwareDetectorDlg::SetChildCheck(HTREEITEM hItem, BOOL bCheck)
{
	HTREEITEM hChildItem = m_DirTree.GetChildItem(hItem);
	while (hChildItem) 
	{
		m_DirTree.SetCheck(hChildItem, bCheck);
		SetChildCheck(hChildItem, bCheck);
		hChildItem = m_DirTree.GetNextSiblingItem(hChildItem);
	}
}

void CMalwareDetectorDlg::SetParentCheck(HTREEITEM hItem, BOOL bCheck)
{
	HTREEITEM hParent = m_DirTree.GetParentItem(hItem);
	if (hParent == NULL)
	{
		return;
	}
	if (bCheck)
	{
		HTREEITEM hSlibing = m_DirTree.GetNextSiblingItem(hItem); //.GetNextItem(hItem, TVGN_NEXT);
		BOOL bFlag = TRUE;
		// 当前Item的前后兄弟节点中是否全都选中？
		while (hSlibing)
		{
			if (!m_DirTree.GetCheck(hSlibing)) 
			{
				bFlag = FALSE; // 后继兄弟节点中有一个没有选中
				break;
			}
			hSlibing = m_DirTree.GetNextSiblingItem(hSlibing); //GetNextItem(hSlibing, TVGN_NEXT);
		}

		if (bFlag) 
		{
			hSlibing = m_DirTree.GetPrevSiblingItem(hItem); //GetNextItem(hItem, TVGN_PREVIOUS);
			while (hSlibing) 
			{
				if (!m_DirTree.GetCheck(hSlibing))
				{
					bFlag = FALSE; // 前驱兄弟节点中有一个没有选中
					break;
				}
				hSlibing = m_DirTree.GetPrevSiblingItem(hSlibing); //GetNextItem(hSlibing, TVGN_PREVIOUS);
			}
		}

		// bFlag为TRUE，表示当前节点的所有前后兄弟节点都已选中，因此设置其父节点也为选中
		if (bFlag)
		{
			m_DirTree.SetCheck(hParent, TRUE);
		}
	}
	else 
	{ // 当前节点设为未选中，当然其父节点也要设置为未选中
		m_DirTree.SetCheck(hParent, FALSE);
	}

	// 递归调用
	SetParentCheck(hParent, m_DirTree.GetCheck(hParent));
}


void CMalwareDetectorDlg::OnNMTVStateImageChangingDir(NMHDR* pNMHDR, LRESULT* pResult)
{
	// TODO: 在此添加控件通知处理程序代码
	CPoint pt;
	GetCursorPos(&pt);
	ScreenToClient(&pt);
	MapWindowPoints((CWnd*)&m_DirTree, &pt, 1);

	UINT flag = TVHT_ONITEM;
	HTREEITEM hCurrentItem = m_DirTree.HitTest(pt, &flag);
	if (hCurrentItem)
	{
		m_DirTree.SelectItem(hCurrentItem);
		if (flag & (TVHT_ONITEMSTATEICON)) 
		{
			CheckToTree(hCurrentItem, !m_DirTree.GetCheck(hCurrentItem));
		}
	}

	*pResult = 0;
}

void CMalwareDetectorDlg::OnBnClickedStartscan()
{
	// TODO: 在此添加控件通知处理程序代码

	std::vector<CString> TargetScanDirsVec;

	HTREEITEM hRoot = m_DirTree.GetRootItem();

	if (m_DirTree.GetCheck(hRoot) && m_DirTree.ItemHasChildren(hRoot))
	{
		HTREEITEM hNextItem = nullptr;
		HTREEITEM hChild = m_DirTree.GetChildItem(hRoot);
		while (hChild)
		{
			m_AllCheckedItemVec.insert(m_DirTree.GetItemText(hChild));
			hChild = m_DirTree.GetNextItem(hChild, TVGN_NEXT);
		}
	}
	else
	{
		GetAllCheckedItem(hRoot);
	}
	m_DirTree.EnableWindow(FALSE);
	m_btnStartScan.EnableWindow(FALSE);
	return;
}
