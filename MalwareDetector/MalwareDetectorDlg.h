
//

#pragma once

#include "MyThreadPool.h"

#define WM_FINDFILE (WM_USER+100)
#define WM_PROGRESS (WM_USER+101)

struct CFileGuid
{
	std::string		m_strGuid;
	std::tstring	m_strFilePath;

	CFileGuid(std::string strGuid, std::tstring strFilePath)
		:m_strGuid(strGuid), m_strFilePath(strFilePath)
	{
	}
};

struct CProgressInfo
{
	CString	m_strFilePath;
	CProgressInfo(CString strFilePath)
		:m_strFilePath(strFilePath)
	{

	}
};




class CMalwareDetectorDlg : public CDialogEx
{
public:
	CMalwareDetectorDlg(CWnd* pParent = nullptr);	

#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_MALWAREDETECTOR_DIALOG };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV



protected:
	HICON m_hIcon;

	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnBnClickedOk();

	void AddTargetFiles(std::vector<CString>& FilesVec);



public:
	int m_nSequeMaxLen; // max length of all the Sequences;
	std::unordered_map<std::string, std::string> m_SequenceMap;
	std::atomic_uintmax_t m_ullScannedCnt;

private:
	// show disk in the treectrl
	void InitTreeCtrl();

	void SetProgressCtrl(int n);

	void InsertTreeItemChildren(HTREEITEM hParent, CString strCurNodeText);

	void GetParentNodeText(HTREEITEM hParent, CString& strFullPath);

	void CheckToTree(HTREEITEM hItem, BOOL bCheck);

	void SetChildCheck(HTREEITEM hItem, BOOL bCheck);

	void SetParentCheck(HTREEITEM hItem, BOOL bCheck);

	void GetAllCheckedItem(HTREEITEM hNode);

	void GetAllSequence();

	void GetAllDrivers(std::vector<CString>& DriversVec);




private:
	CButton			m_btnStartScan;
	CTreeCtrl		m_DirTree;
	CProgressCtrl	m_ProgressCtl;
	CString			m_strShowFindEdit;
	std::set<CString>	m_AllCheckedItemSet; // All dirs to be scanned from the treectrl
	std::vector<CString> m_TargetFiles;  // all the files to be scaned
	CMyThreadPool	m_ThreadPool;
	CRITICAL_SECTION m_cs;
	uintmax_t m_ullTotoal;

	std::unordered_map<std::string, std::tstring> m_FileGuidMap; //has sequence file and its guid

public:
	afx_msg void OnTvnItemexpandingDir(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnNMClickDir(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnNMTVStateImageChangingDir(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnBnClickedStartscan();
	afx_msg void OnBnClickedCancel();
	virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
};


void AppendSplitChar(CString& strSrc);