// MyThreadPool.h: interface for the CMyThreadPool class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_MYTHREADPOOL_H__87597AF3_CD2B_4476_B88A_8E220594C861__INCLUDED_)
#define AFX_MYTHREADPOOL_H__87597AF3_CD2B_4476_B88A_8E220594C861__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <queue>

#include "IWorkItem.h"

typedef std::queue<IWorkItem*> WorkItemQueue, *pWorkItemQueue;

class CMyThreadPool  
{
public:
    CMyThreadPool();
	CMyThreadPool(int nThreadNums);
    virtual ~CMyThreadPool();
    virtual bool InsertWorkItem(IWorkItem* pWorkItem);
    void SetMyLastError(char* psz);
    void GetMyLastError(char* psz);

private:
    static void ThreadProc(void *pParam);
    virtual IWorkItem* RemoveWorkItem();

private:    
    enum {ABORT_EVENT, WORKITEM_EVENT, EVENT_NUM};
    HANDLE           m_hSemaphore[EVENT_NUM];
    int              m_nThreadNums;
    CRITICAL_SECTION m_cs;    
    PHANDLE          m_pThreads;
    WorkItemQueue    m_QueueWrokItem;
    char             m_szErr[MAXBYTE];
};

#endif // !defined(AFX_MYTHREADPOOL_H__87597AF3_CD2B_4476_B88A_8E220594C861__INCLUDED_)
