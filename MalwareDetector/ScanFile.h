#pragma once

#ifndef __SCANFILE_H__
#define __SCANFILE_H__

#include "IWorkItem.h"

class CScanFile : public IWorkItem
{
public:
	explicit CScanFile(void* pNotify, std::vector<CString>&);
	~CScanFile();

	virtual BOOL Execute() override;

	virtual BOOL Abort() override;

	void ScanFile(CString& strFile);


private:
	std::vector<CString> m_TargetFilesVec; // all the files to be scanned
	std::unordered_map<std::tstring, std::string> m_FileGuidMap; //has sequence file and its guid
	void* m_pNotify;


};




class CGetAllFiles : public IWorkItem
{
public:
	explicit CGetAllFiles(void* pWork, std::set<CString>&);
	~CGetAllFiles();

	virtual BOOL Execute() override;

	virtual BOOL Abort() override;

	void GetAllFilesInDir(CString& strDir);


private:
	void* m_pWorker; // Notify pointer
	std::set<CString> m_DirsSet;
	std::vector<CString> m_FilesVec;

};


//////////////////////////////////////////////////////////////////////////
//ÖÇÄÜÁÙ½çÇø
//
class CLock
{
public:
	CLock(CRITICAL_SECTION& cs)
	{
		m_pcs = &cs;
		Lock();
	}
	~CLock()
	{
		Unlock();
	}


	void Lock()
	{
		EnterCriticalSection(m_pcs);
	}

	void Unlock()
	{
		LeaveCriticalSection(m_pcs);
	}

protected:
	CRITICAL_SECTION* m_pcs;

};



#endif //__SCANFILE_H__
